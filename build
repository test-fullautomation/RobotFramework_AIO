#!/bin/bash

#Commandline argument 
#build --robotframework-version=version --itrack-service==URL --config-file=repo_config_file

#
# import common bash scripts
#
. ./include/bash/common.sh

echo 
echo -e "${COL_GREEN}####################################################################################${COL_RESET}"
echo -e "${COL_GREEN}#                                                                                  #${COL_RESET}"
echo -e "${COL_GREEN}#          Compiling RobotFramework AIO setup...                                   #${COL_RESET}"
echo -e "${COL_GREEN}#                                                                                  #${COL_RESET}"
echo -e "${COL_GREEN}####################################################################################${COL_RESET}"

RobotFrameworkVersion=""
ITrackService="NONE"
UNAME=$(uname)
ConfigFile='./config/repositories/repositories.conf'


arguments=""

if [ "$#" -eq 0 ]; then
   echo you can run the build with optional arguments 
   echo ./build --robotframework-version=version --itrack-service==URL --config-file=repo_config_file
   echo version will be part of resulting installer executable and
   echo will be displayed when setup is started at initial screeen.
   echo repo_config_file contains the repository for building.
   echo
else
   for i in "$@"
   do
      case $i in
          --robotframework-version=*)
          RobotFrameworkVersion=`echo $i | sed 's/[-a-zA-Z0-9/]*=//'`
          ;;
          --itrack-service=*)
          ITrackService=`echo $i | sed 's/[-a-zA-Z0-9/]*=//'`
          ITrackService=`echo $ITrackService | sed -e  's/\\\\/\//g'`
          curl -s --head "$ITrackService" | head -n 1 | grep "HTTP/1.[01] [23].." > /dev/null 
          if [ "$?" -ne 0 ]; then
              echo -e $COL_RED"ITrackService not available:"$COL_RESET $ITrackService
              echo -e $COL_RED"build terminated."$COL_RESET
              exit 1
          fi
			 ;;
          --config-file=*)
			 ConfigFile="${i#*=}"
			;;
          --project-config-file=*)
			 ProjectConfigFile=`cygpath -wa "${i#*=}"`
          ;;
          *)
              echo -e $COL_RED"Argument not allowed:"$COL_RESET $i
              echo -e $COL_RED"build terminated."$COL_RESET
              exit 1
          ;;
      esac
   done
fi

if [ -f $ConfigFile ]; then
	echo -e $COL_GREEN"ConfigFile            = $ITrackService"$COL_RESET
else
	errormsg "Repo configuration '$config_file' is not existing"
fi

if [ "$ITrackService" != "NONE" ]; then
	echo -e $COL_GREEN"ITrackService         = $ITrackService"$COL_RESET
	arguments+="//DITrackService=$ITrackService"
fi

if [ "$RobotFrameworkVersion" == "" ]; then
	if [[ "$TRIGGER_BY" =~ $TAG_REGEX || "$TRIGGER_BY" == "tag" ]] && [[ "$TAG_NAME" =~ $TAG_REGEX ]]; then
		# Triggered by a TAG
		RobotFrameworkVersion=`echo $TAG_NAME | sed -E -e "s/(rel|dev)\///g" | sed -E -e "s/aio\///g"`
	elif [ -n "$REF_NAME" ]; then
		if [ "$REF_NAME" == "$DEFAULT_REF" ]; then
			# Triggered by a merged pull request branch
			RobotFrameworkVersion=`echo merged_$REF_NAME | sed -e "s/\//-/g"`
		elif [ -n "$REPOSITORY"  ] && [ -n "$PULL_REQUEST_BRANCH" ]; then 
			# Triggered by other repository
			RobotFrameworkVersion=`echo triggered_by_$REPOSITORY | sed -e "s/\//-/g"`
		else
			# Triggered by any branch manually
			RobotFrameworkVersion=`echo dev_$REF_NAME | sed -e "s/\//-/g"`
		fi
	else
		# Triggered on local
		RobotFrameworkVersion="manual_build"
	fi
fi

echo -e $COL_GREEN"RobotFrameworkVersion = $RobotFrameworkVersion"$COL_RESET
arguments+="//DRobotFrameworkVersion=$RobotFrameworkVersion"
echo

#read -n1 -r -p "Press space to continue..." key
echo -e "${COL_GREEN}####################################################################################${COL_RESET}"
echo -e "${COL_GREEN}#          Installing/Updating libraries                                           #${COL_RESET}"
echo -e "${COL_GREEN}####################################################################################${COL_RESET}"

CURDIR=$(pwd)
if [ "$UNAME" == "Linux" ] ; then
	PYDIR=$(cd ../python39lx; pwd)
	PYBIN=${PYDIR}/install/bin/python3
elif [[ "$UNAME" == CYGWIN* || "$UNAME" == MINGW* ]] ; then
	PYDIR=$(cd ../python39; pwd -W)
	PYBIN=${PYDIR}/python.exe
else
	errormsg "Operation system '$UNAME' is not supported."
fi
cd $CURDIR


#
# import common bash scripts
#
. ./include/bash/common.sh

function get_server_url()
{
	conf_file=$1
	echo $(git config -f $conf_file --get supported-server.$2)
	return
}

function install_texlive () {
	CDIR=$(pwd)
	mkdir -p download
	cd download
	# Try this if the mirror.foobar.to can't be download
	if [ ! -f "install-tl-unx.tar.gz" ]; then
		curl -L https://mirror.foobar.to/CTAN/systems/texlive/tlnet/install-tl-unx.tar.gz -o ./install-tl-unx.tar.gz
	fi
	
	zcat install-tl-unx.tar.gz | tar xf -
	cd install-tl-20*
	sudo perl ./install-tl --no-interaction
	cd $CDIR
}

function check_and_install_texlive () {

	if [ ! -z "$GENDOC_LATEXPATH" ]; then
		return 0
	fi
	echo "install texlive"
	# get last word of pdflatex version text
	
	
	# If pdflatex exist
	ver=`pdflatex -v | head -n 1 | awk 'NF>1{print $NF}'`
	if [ ! -z "$ver" ]; then
		release_year=${ver:0:4}
		if [ $release_year -lt 2019 ]; then
			if [ -f "/usr/local/texlive/$(date +%Y)/bin/x86_64-linux/pdflatex" ]; then
				export GENDOC_LATEXPATH=/usr/local/texlive/$(date +%Y)/bin/x86_64-linux
				return 0
			fi
		else
			export PDFLATEXPATH=`which pdflatex`
			export GENDOC_LATEXPATH=`dirname $PDFLATEXPATH`
			return 0
		fi
	fi
	install_texlive
	export GENDOC_LATEXPATH="/usr/local/texlive/$(date +%Y)/bin/x86_64-linux"
}

function parse_repo () {
	repo_type=$2
	list_repo=($(git config -f $1 --list --name-only | grep "${repo_type}."))
	for repo in "${list_repo[@]}"
	do
	   reponame=${repo#${repo_type}.}
		echo -e "$COL_BLUE$BG_WHITE---- $repo$COL_RESET$COL_BLUE$BG_WHITE -----------------------------------------$COL_RESET"
		cd "../$reponame" 
	   
	   # if script is called without commandline paramteters,
	   # then print "git status", else handover command line parameters
	   # to git call
		   #using force option setup.py to overwrite old files
		if [ -f "./setup.py" ]; then
			PACKNAME=""
			if grep -w setuptools ./setup.py | grep -w import; then
				PACKNAME=$(${PYBIN} ./setup.py --name | tail -n 1)
				if [[ -n "$PACKNAME" ]]; then
					/usr/bin/yes | ${PYBIN} -m pip uninstall ${PACKNAME}
					logresult "$?" "uninstalled ${PACKNAME}" "uninstall ${PACKNAME}"
				fi
			fi
			${PYBIN} ./setup.py clean --all install
			# Avoid build egg: ${PYBIN}  -m pip install .
			logresult "$?" "installed ${reponame}" "install ${reponame}"
		fi
		cd $CURDIR
	done
}

function parse_config () {
	echo "Using config file $1"
	if [ ! -f "$1" ]; then
		errormsg "File '$1' is not exist."
	fi
	echo "git config -f $1 --list --name-only | sed "s/.[^.]*$//" | uniq"
	conf_section=($(git config -f $1 --list --name-only | sed "s/.[^.]*$//" | uniq))
	#echo $conf_section
	for section in "${conf_section[@]}"
	do 
		section_server=$(get_server_url "$1" "$section")
		echo "section server is $section_server"
		if [ "$section_server" != "" ]; then
			echo "Parsing $section"
			parse_repo $1 $section
		elif [ "$section" != "supported-server" ]; then
			sec_name=$(git config -f "$1" --get ${section}.name);
			if [ "$sec_name" == "" ]; then
				sec_name=${section}
			fi
		
			echo -e "$COL_BLUE$BG_WHITE---- $sec_name$COL_RESET$COL_BLUE$BG_WHITE -----------------------------------------$COL_RESET"
			
			sec_path=$(git config -f $1 --get ${section}.path);
			if [ "$sec_path" == "" ]; then
				sec_path="../${sec_name}"
			fi
			
			sec_prebuild=$(git config -f $1 --get ${section}.prebuild);

			cd "$sec_path"
			if [ "$sec_prebuild" != "" ]; then
				$CURDIR/config/repositories/prebuild/$sec_prebuild
			fi

			if [ -f "./setup.py" ]; then
				PACKNAME=""
				if grep -w setuptools ./setup.py | grep -w import; then
					PACKNAME=$(${PYBIN} ./setup.py --name | tail -n 1)
					/usr/bin/yes | ${PYBIN} -m pip uninstall ${PACKNAME}
					logresult "$?" "uninstalled ${PACKNAME}" "uninstall ${PACKNAME}"
				fi
				${PYBIN} ./setup.py install
				${PYBIN} ./setup.py clean --all
				logresult "$?" "installed ${sec_name}" "install ${sec_name}"
			fi
		fi
		cd $CURDIR
	done
}

add_line_to_file() {
    echo "$1" >> version.txt
}

function generate_version_info() {

	add_line_to_file "Installer version:"
	add_line_to_file "******************"
	add_line_to_file "RobotFramework AIO (OSS)  ${RobotFrameworkVersion}"
	add_line_to_file ""
	add_line_to_file "Web sites:"
	add_line_to_file "**********"
	add_line_to_file "List of RobotFramework AIO components:"
	add_line_to_file "    https://htmlpreview.github.io/?https://github.com/test-fullautomation/robotframework-documentation/blob/develop/RobotFrameworkAIO/Components.html"
	add_line_to_file ""
	add_line_to_file "RobotFramework AIO project:"
	add_line_to_file "    https://github.com/test-fullautomation/RobotFramework_AIO"
	add_line_to_file ""
	add_line_to_file "Author:"
	add_line_to_file "*******"
	add_line_to_file "Thomas Pollersp√∂ck <thomas.pollerspoeck@de.bosch.com>"
}


function build_debian()
{	
	generate_version_info
	check_and_install_texlive
	create_testsuitmanagement_package_context_file
	update_debian_control_file
	parse_config $ConfigFile

	cd $CURDIR
	echo -e "${COL_GREEN}####################################################################################${COL_RESET}"
	echo -e "${COL_GREEN}#          Executing dpkg to create installer...                                   #${COL_RESET}"
	echo -e "${COL_GREEN}####################################################################################${COL_RESET}"

	PACK_NAME=RobotFramework_AIO_${AIO_VERSION}

	#first cleanup
	rm -rf ./output_lx/${PACK_NAME}/

	#now create package new
	mkdir -p ./output_lx/${PACK_NAME}/opt/rfwaio/tools
	mkdir -p ./output_lx/${PACK_NAME}/opt/rfwaio/linux
	mkdir -p ./output_lx/${PACK_NAME}/opt/rfwaio/linux/icon
	mkdir -p ./output_lx/${PACK_NAME}/usr/local/bin
	mkdir -p ./output_lx/${PACK_NAME}/DEBIAN

	# DEBIAN installation scripts
	cp ./config/build/dpkg_build/control ./output_lx/${PACK_NAME}/DEBIAN
	cp ./config/build/dpkg_build/preinst.sh ./output_lx/${PACK_NAME}/DEBIAN/preinst
	chmod 755 ./output_lx/${PACK_NAME}/DEBIAN/preinst
	cp ./config/build/dpkg_build/postinst.sh ./output_lx/${PACK_NAME}/DEBIAN/postinst
	chmod 755 ./output_lx/${PACK_NAME}/DEBIAN/postinst
	cp ./config/build/dpkg_build/prerm.sh ./output_lx/${PACK_NAME}/DEBIAN/prerm
	chmod 755 ./output_lx/${PACK_NAME}/DEBIAN/prerm

	# executable scripts and applications
	cp ./config/build/dpkg_build/robot.ico ./output_lx/${PACK_NAME}/opt/rfwaio/linux/icon
	cp ./config/build/dpkg_build/codium.png ./output_lx/${PACK_NAME}/opt/rfwaio/linux/icon
	cp ./config/build/dpkg_build/appium.png ./output_lx/${PACK_NAME}/opt/rfwaio/linux/icon
	cp ./config/build/dpkg_build/appium-inspector.png ./output_lx/${PACK_NAME}/opt/rfwaio/linux/icon
	cp ./config/build/dpkg_build/robot.desktop ./output_lx/${PACK_NAME}/opt/rfwaio/linux/
	cp ./config/build/dpkg_build/appium.desktop ./output_lx/${PACK_NAME}/opt/rfwaio/linux/
	cp ./config/build/dpkg_build/appiumInspector.desktop ./output_lx/${PACK_NAME}/opt/rfwaio/linux/
	cp ./config/build/dpkg_build/set_robotenv.sh ./output_lx/${PACK_NAME}/opt/rfwaio/linux/
	#cp ./config/build/dpkg_build/install_dlt.sh ./output_lx/${PACK_NAME}/opt/rfwaio/linux/
	cp ./config/build/dpkg_build/robot ./output_lx/${PACK_NAME}/usr/local/bin
	chmod +x ./output_lx/${PACK_NAME}/usr/local/bin/robot

	# Vscodium package and RobotTest workspace
	cp -R -a ../robotvscode/. ./output_lx/${PACK_NAME}/opt/rfwaio/robotvscode
	cp -R -a ./config/RobotTest/. ./output_lx/${PACK_NAME}/opt/rfwaio/robotvscode/RobotTest
	cp ./install/install-github-copilot-exts.sh ./output_lx/${PACK_NAME}/opt/rfwaio/robotvscode/install-github-copilot-exts.sh
   chmod +x ./output_lx/${PACK_NAME}/opt/rfwaio/robotvscode/install-github-copilot-exts.sh

	# Tutorial and Documentation packages
	mkdir -p ./output_lx/${PACK_NAME}/opt/rfwaio/tutorial
	cp -R -a ../robotframework-tutorial/[0-9][0-9][0-9]_* ./output_lx/${PACK_NAME}/opt/rfwaio/tutorial/
	mkdir -p ./output_lx/${PACK_NAME}/opt/rfwaio/documentation
	cp ../robotframework-documentation/book/RobotFrameworkAIO_Reference.pdf ./output_lx/${PACK_NAME}/opt/rfwaio/documentation/

	# Python package: core framework and libraries
	cp -R -a ../python39lx/. ./output_lx/${PACK_NAME}/opt/rfwaio/python39
	cp -R -a ./test/aio-analyzer ./output_lx/${PACK_NAME}/opt/rfwaio/tools/aio-analyzer

	# Devtools: Android package
	mkdir -p ./output_lx/${PACK_NAME}/opt/rfwaio/devtools
	cp -R -a ../devtools/. ./output_lx/${PACK_NAME}/opt/rfwaio/devtools
	chmod +x ./output_lx/${PACK_NAME}/opt/rfwaio/devtools/Appium-Inspector.AppImage
	cp ./config/tools/appium.sh ./output_lx/${PACK_NAME}/opt/rfwaio/devtools/appium
	chmod +x ./output_lx/${PACK_NAME}/opt/rfwaio/devtools/appium

	# initial script to setup environment for multiple users
	cp ./config/build/dpkg_build/postinst.sh ./output_lx/${PACK_NAME}/usr/local/bin/initRobotFrameworkAIO.sh
	chmod +x ./output_lx/${PACK_NAME}/usr/local/bin/initRobotFrameworkAIO.sh

	# Update version
	cp ./version.txt ./output_lx/${PACK_NAME}/opt/rfwaio/

	logresult "$?" "prepared package build" "prepare package build"

	dpkg-deb --root-owner-group --build ./output_lx/${PACK_NAME} ./output_lx/RobotFramework_AIO_${RobotFrameworkVersion}-0_amd64.deb
	logresult "$?" "built deb package" "build deb package"

	dpkg -I ./output_lx/RobotFramework_AIO_${RobotFrameworkVersion}-0_amd64.deb
	goodmsg "done."
}

function build_windows() {
	# Add pandoc to PATH env
	mypath=$(realpath $(dirname $0))
	export PATH=$PATH:$mypath/../pandoc/pandoc-2.18
	echo $PATH

	# set $GENDOC_LATEXPATH var for building document
	if [ -z "$GENDOC_LATEXPATH" ]; then
		errormsg "Environment variable 'GENDOC_LATEXPATH' is not set."
	fi

	generate_version_info
	create_testsuitmanagement_package_context_file
	parse_config $ConfigFile

	cd $CURDIR

	echo -e "${COL_GREEN}####################################################################################${COL_RESET}"
	echo -e "${COL_GREEN}#          Executing InnoSetup to create installer...                              #${COL_RESET}"
	echo -e "${COL_GREEN}####################################################################################${COL_RESET}"

	./scripts/precompile.bat $ProjectConfigFile
	./tools/InnoSetup5.5.1/ISCC "${arguments}" ./scripts/RobotFrameworkSetup.iss
	logresult "$?" "built RobotFramework AIO installer" "build RobotFramework AIO installer"
	./scripts/postcompile.bat
}

if [ "$UNAME" == "Linux" ] ; then
	build_debian
elif [[ "$UNAME" == CYGWIN* || "$UNAME" == MINGW* ]] ; then
	build_windows
else
	errormsg "Operation system '$UNAME' is not supported."
fi